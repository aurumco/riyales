name: Release Android

permissions:
  contents: write
  packages: write

on:
  workflow_dispatch:
    inputs:
      upgrade_flutter:
        description: 'Upgrade Flutter to the latest stable version (true/false)'
        required: false
        default: 'false'

env:
  FLUTTER_VERSION: '3.32.6'
  DART_VERSION: '3.8.1'
  SKIP_JDK_VERSION_CHECK: true
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  JAVA_OPTS: "-XX:+UseParallelGC -Xmx2g -Xms512m"

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Dart SDK
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/dart-sdk
          key: ${{ runner.os }}-dart-${{ env.DART_VERSION }}
          restore-keys: |
            ${{ runner.os }}-dart-

      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-${{ env.FLUTTER_VERSION }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}-
            ${{ runner.os }}-flutter-

      - name: Set up Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Upgrade Flutter (optional)
        if: github.event.inputs.upgrade_flutter == 'true'
        run: flutter upgrade --force

      - name: Check Flutter and Dart versions
        run: |
          flutter --version
          dart --version

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-dart-deps-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-deps-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up Android SDK
        run: |
          # Install command line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip -q cmdline-tools.zip -d $ANDROID_HOME
          rm cmdline-tools.zip
          mkdir -p $ANDROID_HOME/cmdline-tools/latest
          mv $ANDROID_HOME/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/ || true
          # Accept licenses
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          # Install required SDK components
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "cmake;3.22.1" \
            "ndk;27.0.12077973"

      - name: Install dependencies
        run: flutter pub get

      - name: Flutter clean
        run: flutter clean

      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          echo "Extracted version: $VERSION"
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/my-release-key.jks

      - name: Setup Keystore
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=android/my-release-key.jks" >> android/key.properties

      - name: Debug Keystore Setup
        run: |
          echo "Checking key.properties..."
          cat android/key.properties
          if [ ! -f "android/my-release-key.jks" ]; then
            echo "Keystore file not found!"
            exit 1
          fi

      - name: Build APK (Universal)
        run: flutter build apk --release --android-skip-build-dependency-validation
        continue-on-error: false

      - name: Check APK output
        run: |
          echo "Checking APK outputs directory..."
          find build/app/outputs -type f -name "*.apk"
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "APK build successful"
          else
            echo "APK build failed - file not found"
            exit 1
          fi

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/android
          cp build/app/outputs/flutter-apk/app-release.apk artifacts/android/riyales-${{ env.APP_VERSION }}.apk
          cd artifacts/android
          zip -r riyales-android-${{ env.APP_VERSION }}.zip .
          cd ../..
          ls -la artifacts/android/

      - name: Verify APK and Zip Output
        run: |
          if [ -f "artifacts/android/riyales-${{ env.APP_VERSION }}.apk" ] && [ -f "artifacts/android/riyales-android-${{ env.APP_VERSION }}.zip" ]; then
            echo "APK and zip files created successfully"
            ls -la artifacts/android/riyales-${{ env.APP_VERSION }}.apk
            ls -la artifacts/android/riyales-android-${{ env.APP_VERSION }}.zip
          else
            echo "APK or zip file creation failed - files not found"
            exit 1
          fi

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: riyales-android
          path: artifacts/android/

  release:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository

      - name: Extract version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          echo "Extracted version: $VERSION"
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        name: Download Android artifacts
        with:
          name: riyales-android
          path: artifacts/android

      - name: Attach APK and zip to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.APP_VERSION }}
          name: Release v${{ env.APP_VERSION }}
          files: |
            artifacts/android/riyales-${{ env.APP_VERSION }}.apk
            artifacts/android/riyales-android-${{ env.APP_VERSION }}.zip

  cleanup:
    name: Cleanup Old Workflow Runs
    if: always()
    runs-on: ubuntu-latest
    permissions:
      actions: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ${{ github.repository }}
      WF: ${{ github.workflow }}
    steps:
      - name: Remove old workflow runs
        run: |
          runs=$(gh run list \
            --repo "$REPO" \
            --workflow "$WF" \
            --limit 100 \
            --json databaseId,status,createdAt \
            --jq '.[] | select(.status!="in_progress" and .status!="queued") | {id: .databaseId, date: .createdAt}' | \
            jq -s 'sort_by(.date) | reverse | .[].id')
          total=$(echo "$runs" | wc -l)
          if [ "$total" -le 9 ]; then exit 0; fi
          # delete all older than the 9 newest
          to_delete=$(echo "$runs" | tail -n +10)
          echo "$to_delete" | while read id; do
            echo "Deleting run ID: $id"
            gh run delete "$id" --repo "$REPO"
          done
        shell: bash
